name: Deploy Fashion Recommender

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -c "import app_simple; print('Flask app imports successfully')"
        python -c "import ast; ast.parse(open('main_simple.py').read()); print('Streamlit app syntax is valid')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug Secrets
      run: |
        echo "VPS_HOST: ${{ secrets.VPS_HOST }}"
        echo "VPS_USERNAME: ${{ secrets.VPS_USERNAME }}"
        echo "VPS_PORT: ${{ secrets.VPS_PORT }}"
        echo "VPS_SSH_KEY length: ${#VPS_SSH_KEY}"
        VPS_SSH_KEY="${{ secrets.VPS_SSH_KEY }}"
        echo "VPS_SSH_KEY length: ${#VPS_SSH_KEY}"
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "ERROR: VPS_HOST is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          echo "ERROR: VPS_USERNAME is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_PORT }}" ]; then
          echo "ERROR: VPS_PORT is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "ERROR: VPS_SSH_KEY is empty or not set"
          exit 1
        fi
        echo "All secrets are properly set!"
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 20m
        command_timeout: 20m
        script: |
          set -e
          
          echo "Starting deployment..."
          
          # Update system and install required packages
          echo "Installing system packages..."
          apt update -y
          apt install -y git curl wget nginx python3 python3-pip python3-venv
          
          # Navigate to project directory
          if [ ! -d "/opt/fashion-recommender" ]; then
            echo "Project directory not found. Creating it..."
            mkdir -p /opt/fashion-recommender
            cd /opt/fashion-recommender
            git clone https://github.com/ashmhmd25321/fashion_recommender.git .
          else
            cd /opt/fashion-recommender
            if [ ! -d ".git" ]; then
              echo "Git repository not found. Initializing..."
              rm -rf * .* 2>/dev/null || true  # Clean directory
              git clone https://github.com/ashmhmd25321/fashion_recommender.git .
            else
              echo "Checking git status..."
              git status || {
                echo "Git repository corrupted. Re-cloning..."
                cd ..
                rm -rf fashion-recommender
                mkdir -p fashion-recommender
                cd fashion-recommender
                git clone https://github.com/ashmhmd25321/fashion_recommender.git .
              }
              
              # Check if origin remote exists
              if ! git remote get-url origin >/dev/null 2>&1; then
                echo "No origin remote found. Adding it..."
                git remote add origin https://github.com/ashmhmd25321/fashion_recommender.git
              fi
              
              # Check if we're on the right branch
              current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
              if [ "$current_branch" != "main" ]; then
                echo "Switching to main branch..."
                git fetch origin
                git checkout -b main origin/main || git checkout main
              fi
              
              echo "Pulling latest changes..."
              git pull origin main || {
                echo "ERROR: Failed to pull changes"
                exit 1
              }
            fi
          fi
          
          # Create virtual environment
          echo "Setting up Python virtual environment..."
          python3 -m venv venv
          source venv/bin/activate
          
          # Install dependencies
          echo "Installing Python dependencies..."
          pip install -r requirements.txt
          
          # Stop any existing systemd services first
          echo "Stopping existing systemd services..."
          systemctl stop fashion-flask.service || echo "Flask service not running"
          systemctl stop fashion-streamlit.service || echo "Streamlit service not running"
          
          # Wait a moment for services to stop
          sleep 2
          
          # Create systemd services
          echo "Creating systemd services..."
          
          # Flask service
          echo "[Unit]" > /etc/systemd/system/fashion-flask.service
          echo "Description=Fashion Recommendation Flask App" >> /etc/systemd/system/fashion-flask.service
          echo "After=network.target" >> /etc/systemd/system/fashion-flask.service
          echo "" >> /etc/systemd/system/fashion-flask.service
          echo "[Service]" >> /etc/systemd/system/fashion-flask.service
          echo "Type=simple" >> /etc/systemd/system/fashion-flask.service
          echo "User=root" >> /etc/systemd/system/fashion-flask.service
          echo "WorkingDirectory=/opt/fashion-recommender" >> /etc/systemd/system/fashion-flask.service
          echo "Environment=PATH=/opt/fashion-recommender/venv/bin" >> /etc/systemd/system/fashion-flask.service
          echo "Environment=FLASK_APP=app_simple.py" >> /etc/systemd/system/fashion-flask.service
          echo "Environment=FLASK_ENV=production" >> /etc/systemd/system/fashion-flask.service
          echo "ExecStart=/opt/fashion-recommender/venv/bin/python -c \"import app_simple; app_simple.create_tables(); app_simple.app.run(host='0.0.0.0', port=5001, debug=False)\"" >> /etc/systemd/system/fashion-flask.service
          echo "Restart=always" >> /etc/systemd/system/fashion-flask.service
          echo "RestartSec=10" >> /etc/systemd/system/fashion-flask.service
          echo "" >> /etc/systemd/system/fashion-flask.service
          echo "[Install]" >> /etc/systemd/system/fashion-flask.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/fashion-flask.service

          # Streamlit service
          echo "[Unit]" > /etc/systemd/system/fashion-streamlit.service
          echo "Description=Fashion Recommendation Streamlit App" >> /etc/systemd/system/fashion-streamlit.service
          echo "After=network.target" >> /etc/systemd/system/fashion-streamlit.service
          echo "" >> /etc/systemd/system/fashion-streamlit.service
          echo "[Service]" >> /etc/systemd/system/fashion-streamlit.service
          echo "Type=simple" >> /etc/systemd/system/fashion-streamlit.service
          echo "User=root" >> /etc/systemd/system/fashion-streamlit.service
          echo "WorkingDirectory=/opt/fashion-recommender" >> /etc/systemd/system/fashion-streamlit.service
          echo "Environment=PATH=/opt/fashion-recommender/venv/bin" >> /etc/systemd/system/fashion-streamlit.service
          echo "ExecStart=/opt/fashion-recommender/venv/bin/streamlit run main_simple.py --server.port=8501 --server.address=0.0.0.0" >> /etc/systemd/system/fashion-streamlit.service
          echo "Restart=always" >> /etc/systemd/system/fashion-streamlit.service
          echo "RestartSec=10" >> /etc/systemd/system/fashion-streamlit.service
          echo "" >> /etc/systemd/system/fashion-streamlit.service
          echo "[Install]" >> /etc/systemd/system/fashion-streamlit.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/fashion-streamlit.service

          # Reload systemd and start services
          echo "Starting services..."
          systemctl daemon-reload
          echo "Enabling services..."
          systemctl enable fashion-flask.service
          systemctl enable fashion-streamlit.service
          echo "Starting Flask service..."
          systemctl start fashion-flask.service || {
            echo "ERROR: Failed to start Flask service"
            systemctl status fashion-flask.service --no-pager
            exit 1
          }
          echo "Starting Streamlit service..."
          systemctl start fashion-streamlit.service || {
            echo "ERROR: Failed to start Streamlit service"
            systemctl status fashion-streamlit.service --no-pager
            exit 1
          }
          
          # Wait for services to start
          echo "Waiting for services to start..."
          sleep 15
          
          # Check service status
          echo "Checking service status..."
          systemctl status fashion-flask.service --no-pager
          systemctl status fashion-streamlit.service --no-pager
          
          # Check service logs for errors
          echo "Checking Flask service logs..."
          journalctl -u fashion-flask.service --no-pager -n 20
          echo "Checking Streamlit service logs..."
          journalctl -u fashion-streamlit.service --no-pager -n 20
          
          # Test the application
          echo "Testing application health..."
          curl -f http://localhost:5001/health || echo "Flask health check failed"
          curl -f http://localhost:8501 || echo "Streamlit health check failed"
          
          echo "Deployment completed successfully!"
