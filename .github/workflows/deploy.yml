name: Deploy Fashion Recommender

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -c "import app_simple; print('Flask app imports successfully')"
        python -c "import ast; ast.parse(open('main_simple.py').read()); print('Streamlit app syntax is valid')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug Secrets
      run: |
        echo "VPS_HOST: ${{ secrets.VPS_HOST }}"
        echo "VPS_USERNAME: ${{ secrets.VPS_USERNAME }}"
        echo "VPS_PORT: ${{ secrets.VPS_PORT }}"
        echo "VPS_SSH_KEY length: ${#VPS_SSH_KEY}"
        VPS_SSH_KEY="${{ secrets.VPS_SSH_KEY }}"
        echo "VPS_SSH_KEY length: ${#VPS_SSH_KEY}"
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "ERROR: VPS_HOST is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          echo "ERROR: VPS_USERNAME is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_PORT }}" ]; then
          echo "ERROR: VPS_PORT is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "ERROR: VPS_SSH_KEY is empty or not set"
          exit 1
        fi
        echo "All secrets are properly set!"
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 20m
        command_timeout: 20m
        script: |
          set -e
          
          echo "Starting deployment..."
          
          # Update system and install required packages
          echo "Installing system packages..."
          apt update -y
          apt install -y git curl wget nginx python3 python3-pip python3-venv certbot python3-certbot-nginx ufw
          
          # Navigate to project directory
          if [ ! -d "/opt/fashion-recommender" ]; then
            echo "Project directory not found. Creating it..."
            mkdir -p /opt/fashion-recommender
            cd /opt/fashion-recommender
            git clone https://github.com/ashmhmd25321/fashion_recommender.git .
          else
            cd /opt/fashion-recommender
            if [ ! -d ".git" ]; then
              echo "Git repository not found. Initializing..."
              rm -rf * .* 2>/dev/null || true  # Clean directory
              git clone https://github.com/ashmhmd25321/fashion_recommender.git .
            else
              echo "Checking git status..."
              git status || {
                echo "Git repository corrupted. Re-cloning..."
                cd ..
                rm -rf fashion-recommender
                mkdir -p fashion-recommender
                cd fashion-recommender
                git clone https://github.com/ashmhmd25321/fashion_recommender.git .
              }
              
              # Check if origin remote exists
              if ! git remote get-url origin >/dev/null 2>&1; then
                echo "No origin remote found. Adding it..."
                git remote add origin https://github.com/ashmhmd25321/fashion_recommender.git
              fi
              
              # Check if we're on the right branch
              current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
              if [ "$current_branch" != "main" ]; then
                echo "Switching to main branch..."
                git fetch origin
                git checkout -b main origin/main || git checkout main
              fi
              
              echo "Pulling latest changes..."
              git pull origin main || {
                echo "ERROR: Failed to pull changes"
                exit 1
              }
            fi
          fi
          
          # Create virtual environment
          echo "Setting up Python virtual environment..."
          python3 -m venv venv
          source venv/bin/activate
          
          # Install dependencies
          echo "Installing Python dependencies..."
          pip install -r requirements.txt
          
          # Generate pickle files if they don't exist
          echo "Checking for pickle files..."
          if [ ! -f "embeddings_simple.pkl" ] || [ ! -f "filenames_simple.pkl" ]; then
            echo "Pickle files not found. Generating them..."
            python generate_pickle.py
          else
            echo "Pickle files already exist"
          fi

          # Test Flask app import
          echo "Testing Flask app import..."
          python -c "import app_simple; print('Flask app imports successfully')" || {
            echo "ERROR: Flask app import failed"
            exit 1
          }
          
          # Run Flask debug script to identify issues
          echo "Running Flask debug script..."
          python debug_flask.py || echo "Flask debug test failed"
          
          # Stop any existing systemd services first
          echo "Stopping existing systemd services..."
          systemctl stop fashion-flask.service || echo "Flask service not running"
          systemctl stop fashion-streamlit.service || echo "Streamlit service not running"

          # Check for processes using our ports and handle conflicts
          echo "Checking for processes on ports 5002 and 8501..."
          netstat -tulpn | grep :5002 || echo "Port 5002 is free"
          netstat -tulpn | grep :8501 || echo "Port 8501 is free"
          
          # If there's a process on port 5002, kill it safely
          if netstat -tulpn | grep :5002 >/dev/null; then
            echo "Port 5002 is in use, finding and stopping the process..."
            PID=$(netstat -tulpn | grep :5002 | awk '{print $7}' | cut -d'/' -f1)
            if [ ! -z "$PID" ] && [ "$PID" != "-" ]; then
              echo "Killing process $PID on port 5002..."
              kill $PID || echo "Process already stopped"
              sleep 2
            fi
          fi

          # Wait a moment for systemd to stop services
          sleep 3
          
          # Configure Nginx (safely without affecting other projects)
          echo "Configuring Nginx for fashion.dreamware.lk..."
          
          # Backup existing Nginx configuration if it exists
          if [ -f "/etc/nginx/sites-available/fashion.dreamware.lk" ]; then
            echo "Backing up existing fashion.dreamware.lk configuration..."
            cp /etc/nginx/sites-available/fashion.dreamware.lk /etc/nginx/sites-available/fashion.dreamware.lk.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Create initial HTTP-only Nginx configuration first
          echo "Creating initial HTTP-only Nginx configuration..."
          cat > /etc/nginx/sites-available/fashion.dreamware.lk << 'EOF'
server {
    listen 80;
    server_name fashion.dreamware.lk www.fashion.dreamware.lk;
    
    location / {
        proxy_pass http://127.0.0.1:5002;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /streamlit/ {
        proxy_pass http://127.0.0.1:8501/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF
          ln -sf /etc/nginx/sites-available/fashion.dreamware.lk /etc/nginx/sites-enabled/
          
          # Only remove default Nginx site if it exists and is the default one
          if [ -f "/etc/nginx/sites-enabled/default" ]; then
            echo "Removing default Nginx site..."
            rm -f /etc/nginx/sites-enabled/default
          else
            echo "No default Nginx site found, keeping existing configuration"
          fi
          
          # Test Nginx configuration
          nginx -t || {
            echo "ERROR: Nginx configuration test failed"
            echo "Rolling back Nginx configuration..."
            rm -f /etc/nginx/sites-enabled/fashion.dreamware.lk
            if [ -f "/etc/nginx/sites-available/fashion.dreamware.lk.backup.$(date +%Y%m%d_%H%M%S)" ]; then
              echo "Restoring previous configuration..."
              # Find the most recent backup
              LATEST_BACKUP=$(ls -t /etc/nginx/sites-available/fashion.dreamware.lk.backup.* 2>/dev/null | head -1)
              if [ ! -z "$LATEST_BACKUP" ]; then
                cp "$LATEST_BACKUP" /etc/nginx/sites-available/fashion.dreamware.lk
                ln -sf /etc/nginx/sites-available/fashion.dreamware.lk /etc/nginx/sites-enabled/
                nginx -t && systemctl reload nginx
              fi
            fi
            exit 1
          }
          
          # Configure firewall (only add rules, don't enable if already configured)
          echo "Configuring firewall rules..."
          # Check if UFW is already enabled
          if ! ufw status | grep -q "Status: active"; then
            echo "UFW not active, enabling with basic rules..."
            ufw --force enable
            ufw allow ssh
            ufw allow 80
            ufw allow 443
          else
            echo "UFW already active, only adding necessary rules..."
            ufw allow 80 2>/dev/null || echo "Port 80 rule already exists"
            ufw allow 443 2>/dev/null || echo "Port 443 rule already exists"
          fi
          
          # Block direct access to internal ports (only if not already blocked)
          ufw deny 5002 2>/dev/null || echo "Port 5002 already blocked"
          ufw deny 8501 2>/dev/null || echo "Port 8501 already blocked"
          
          # Start Nginx (only if not already running)
          if ! systemctl is-active --quiet nginx; then
            echo "Starting Nginx..."
            systemctl start nginx
          else
            echo "Nginx already running, reloading configuration..."
            systemctl reload nginx
          fi
          
          # Enable Nginx (only if not already enabled)
          if ! systemctl is-enabled --quiet nginx; then
            systemctl enable nginx
          fi
          
          # Set up SSL certificate with Let's Encrypt
          echo "Setting up SSL certificate..."
          if [ ! -f "/etc/letsencrypt/live/fashion.dreamware.lk/fullchain.pem" ]; then
            echo "Obtaining SSL certificate..."
            certbot --nginx -d fashion.dreamware.lk -d www.fashion.dreamware.lk --non-interactive --agree-tos --email admin@dreamware.lk --redirect || {
              echo "WARNING: SSL certificate setup failed. Continuing with HTTP only."
              echo "HTTP-only configuration is already in place."
            }
          else
            echo "SSL certificate already exists, updating to full SSL configuration..."
            # Replace with full SSL-enabled configuration
            cp nginx_fashion.conf /etc/nginx/sites-available/fashion.dreamware.lk
            nginx -t && systemctl reload nginx
          fi
          
          # Create systemd services
          echo "Creating systemd services..."
          
          # Flask service
          echo "[Unit]" > /etc/systemd/system/fashion-flask.service
          echo "Description=Fashion Recommendation Flask App" >> /etc/systemd/system/fashion-flask.service
          echo "After=network.target" >> /etc/systemd/system/fashion-flask.service
          echo "" >> /etc/systemd/system/fashion-flask.service
          echo "[Service]" >> /etc/systemd/system/fashion-flask.service
          echo "Type=simple" >> /etc/systemd/system/fashion-flask.service
          echo "User=root" >> /etc/systemd/system/fashion-flask.service
          echo "WorkingDirectory=/opt/fashion-recommender" >> /etc/systemd/system/fashion-flask.service
          echo "Environment=PATH=/opt/fashion-recommender/venv/bin" >> /etc/systemd/system/fashion-flask.service
          echo "Environment=FLASK_APP=app_simple.py" >> /etc/systemd/system/fashion-flask.service
          echo "Environment=FLASK_ENV=production" >> /etc/systemd/system/fashion-flask.service
          echo "ExecStart=/opt/fashion-recommender/venv/bin/python app_simple.py" >> /etc/systemd/system/fashion-flask.service
          echo "Restart=always" >> /etc/systemd/system/fashion-flask.service
          echo "RestartSec=10" >> /etc/systemd/system/fashion-flask.service
          echo "" >> /etc/systemd/system/fashion-flask.service
          echo "[Install]" >> /etc/systemd/system/fashion-flask.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/fashion-flask.service

          # Streamlit service
          echo "[Unit]" > /etc/systemd/system/fashion-streamlit.service
          echo "Description=Fashion Recommendation Streamlit App" >> /etc/systemd/system/fashion-streamlit.service
          echo "After=network.target" >> /etc/systemd/system/fashion-streamlit.service
          echo "" >> /etc/systemd/system/fashion-streamlit.service
          echo "[Service]" >> /etc/systemd/system/fashion-streamlit.service
          echo "Type=simple" >> /etc/systemd/system/fashion-streamlit.service
          echo "User=root" >> /etc/systemd/system/fashion-streamlit.service
          echo "WorkingDirectory=/opt/fashion-recommender" >> /etc/systemd/system/fashion-streamlit.service
          echo "Environment=PATH=/opt/fashion-recommender/venv/bin" >> /etc/systemd/system/fashion-streamlit.service
          echo "ExecStart=/opt/fashion-recommender/venv/bin/streamlit run main_simple.py --server.port=8501 --server.address=0.0.0.0" >> /etc/systemd/system/fashion-streamlit.service
          echo "Restart=always" >> /etc/systemd/system/fashion-streamlit.service
          echo "RestartSec=10" >> /etc/systemd/system/fashion-streamlit.service
          echo "" >> /etc/systemd/system/fashion-streamlit.service
          echo "[Install]" >> /etc/systemd/system/fashion-streamlit.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/fashion-streamlit.service

          # Reload systemd and start services
          echo "Starting services..."
          systemctl daemon-reload
          echo "Enabling services..."
          systemctl enable fashion-flask.service
          systemctl enable fashion-streamlit.service
          echo "Starting Flask service..."
          systemctl start fashion-flask.service || {
            echo "ERROR: Failed to start Flask service"
            systemctl status fashion-flask.service --no-pager
            echo "Checking Flask service logs for errors..."
            journalctl -u fashion-flask.service --no-pager -n 20
            echo "Continuing with debug script..."
          }
          echo "Starting Streamlit service..."
          systemctl start fashion-streamlit.service || {
            echo "ERROR: Failed to start Streamlit service"
            systemctl status fashion-streamlit.service --no-pager
            exit 1
          }
          
          # Wait for services to start
          echo "Waiting for services to start..."
          sleep 15
          
          # Check service status
          echo "Checking service status..."
          systemctl status fashion-flask.service --no-pager
          systemctl status fashion-streamlit.service --no-pager
          
          # Check service logs for errors
          echo "Checking Flask service logs..."
          journalctl -u fashion-flask.service --no-pager -n 50
          echo "Checking Streamlit service logs..."
          journalctl -u fashion-streamlit.service --no-pager -n 50
          
          # Test Flask app manually with detailed error output
          echo "Testing Flask app manually with detailed debugging..."
          cd /opt/fashion-recommender
          source venv/bin/activate
          
          # Test the application
          echo "Testing application health..."
          curl -f http://fashion.dreamware.lk/health || echo "Flask health check failed"
          curl -f http://fashion.dreamware.lk/streamlit/ || echo "Streamlit health check failed"
          
          # Test HTTPS if SSL is configured
          if [ -f "/etc/letsencrypt/live/fashion.dreamware.lk/fullchain.pem" ]; then
            echo "Testing HTTPS..."
            curl -f https://fashion.dreamware.lk/health || echo "HTTPS health check failed"
          fi
          
          echo "Deployment completed successfully!"
