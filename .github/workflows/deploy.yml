name: Deploy Fashion Recommender

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -c "import app_simple; print('Flask app imports successfully')"
        python -c "import ast; ast.parse(open('main_simple.py').read()); print('Streamlit app syntax is valid')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug Secrets
      run: |
        echo "VPS_HOST: ${{ secrets.VPS_HOST }}"
        echo "VPS_USERNAME: ${{ secrets.VPS_USERNAME }}"
        echo "VPS_PORT: ${{ secrets.VPS_PORT }}"
        echo "VPS_SSH_KEY length: ${#VPS_SSH_KEY}"
        VPS_SSH_KEY="${{ secrets.VPS_SSH_KEY }}"
        echo "VPS_SSH_KEY length: ${#VPS_SSH_KEY}"
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "ERROR: VPS_HOST is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          echo "ERROR: VPS_USERNAME is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_PORT }}" ]; then
          echo "ERROR: VPS_PORT is empty or not set"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "ERROR: VPS_SSH_KEY is empty or not set"
          exit 1
        fi
        echo "All secrets are properly set!"
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 10m
        command_timeout: 10m
        script: |
          set -e  # Exit on any error
          
          echo "Starting deployment..."
          
          # Update system and install required packages
          echo "Updating system packages..."
          apt update -y
          apt install -y git curl wget docker.io docker-compose nginx || echo "Some packages may already be installed"
          
          # Start Docker service
          echo "Starting Docker service..."
          systemctl start docker || echo "Docker may already be running"
          systemctl enable docker || echo "Docker may already be enabled"
          
          # Navigate to project directory
          if [ ! -d "/opt/fashion-recommender" ]; then
            echo "Project directory not found. Creating it..."
            mkdir -p /opt/fashion-recommender
            cd /opt/fashion-recommender
            git clone https://github.com/ashmhmd25321/fashion_recommender.git .
          else
            cd /opt/fashion-recommender
            if [ ! -d ".git" ]; then
              echo "Git repository not found. Initializing..."
              git init
              git remote add origin https://github.com/ashmhmd25321/fashion_recommender.git
              git fetch origin
              git checkout -b main origin/main
            else
              echo "Pulling latest changes..."
              git pull origin main || {
                echo "ERROR: Failed to pull changes"
                exit 1
              }
            fi
          fi
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose down || echo "No existing containers to stop"
          
          # Remove old images
          echo "Cleaning up old images..."
          docker image prune -f || echo "No images to prune"
          
          # Build and start new containers
          echo "Building and starting new containers..."
          docker-compose up -d --build || {
            echo "ERROR: Failed to start containers"
            exit 1
          }
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if services are running
          echo "Checking container status..."
          docker-compose ps
          
          # Test the application
          echo "Testing application health..."
          curl -f http://localhost:5001/health || {
            echo "ERROR: Application health check failed"
            docker-compose logs
            exit 1
          }
          
          echo "Deployment completed successfully!"
